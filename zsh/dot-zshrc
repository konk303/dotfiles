# home/bin
export PATH="$HOME/bin:$PATH"

# envs
export EDITOR=emacsclient
export VISUAL=emacsclient
export CLICOLOR=1

# rbenv
eval "$(rbenv init - zsh)"

# nodenv
export PATH="$HOME/.nodenv/bin:$PATH"
eval "$(nodenv init -)"

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/kimihiko.nakamura/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

# zmv
autoload -Uz zmv
# use extended glob (#, ~, ^), without aborting
setopt extended_glob
setopt no_nomatch
# autos
setopt auto_cd
setopt auto_list
setopt auto_menu
setopt auto_param_keys
setopt auto_param_slash
setopt auto_resume
# no beep
setopt no_beep
# other setopts
setopt brace_ccl
setopt correct
setopt equals
setopt no_flow_control
setopt no_hup
setopt ignore_eof
setopt interactive_comments
setopt list_types
setopt long_list_jobs
setopt magic_equal_subst
setopt mark_dirs
setopt multios
setopt numeric_glob_sort
setopt print_eightbit
setopt print_exit_value
setopt pushd_ignore_dups
setopt short_loops
setopt prompt_subst
unsetopt promptcr
setopt transient_rprompt
setopt autopushd

# complitions
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
  autoload -Uz compinit
  compinit
fi

# history settings
HISTSIZE=100000
SAVEHIST=100000
setopt append_history
setopt extended_history
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_no_store
setopt hist_verify
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' list-colors ''
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end

# prompt
source "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh"
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1_SHOWSTASHSTATE=true
GIT_PS1_SHOWUPSTREAM=auto
autoload colors
colors
function git_color() {
  local git_info="$(__git_ps1 "%s")"
  if [[ $git_info == *"*"* ]] || [[ $git_info == *"+"* ]]; then
    echo "%{${fg[red]}%}"
  elif [[ $git_info == *"%"* ]]; then
    echo "%{${fg[yellow]}%}"
  else
    echo "%{${fg[green]}%}"
  fi
}
PROMPT="%{${fg_bold[cyan]}%}%#%{${reset_color}%} "
PROMPT2="%{${fg[blue]}%}%_> %{${reset_color}%}"
SPROMPT="%{${fg[red]}%}correct: %R -> %r [nyae]? %{${reset_color}%}"
RPROMPT='$(git_color)$(__git_ps1)%{${reset_color}%}[%{${fg_bold[cyan]}%}%~%{${reset_color}%}] %{${fg_bold[magenta]}%}%D %T%{${reset_color}%}'

# aliases
alias ll='ls -lah'
alias cp='cp -v'
alias mv='mv -v'
alias rm='rm -v'
alias r=rails
alias g='git'
alias e='emacsclient'
alias ee='open /Applications/Emacs.app'
alias cdd='cd $(ghq root)/$(ghq list | peco)'
alias doc='docker compose'
alias dev='cd ~/src/github.com/creal'

# stolen from https://github.com/otaaaa/dotfiles/blob/master/zshrc
function keygen() {
  local length=12
  echo "$(openssl rand -base64 $length)"
}

function uuid() {
  uuidgen | tr \[:upper:\] \[:lower:\]
}

function ipv4() {
  ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
}

function gip() {
  curl -s http://checkip.amazonaws.com
}
function cleanup {
  rm -f tmp/pids/server.pid && \
  docker container prune -f && \
  docker volume rm $(docker volume ls -q -f name=redis-data | fzf)
}

# Node.js
alias ns="npm ls -g --depth=0"

# Google Cloud Platform
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"

# Kubernetes
source <(kubectl completion zsh)
complete -F __start_kubectl kc

function kctx {
  kubectl config unset current-context > /dev/null 2>&1
  export REGION_NAME=asia-northeast1
  export CLUSTER_NAME=$(gcloud container clusters list --format 'value(name)' --limit 1 2>/dev/null)
  if [ ! -z $CLUSTER_NAME ]; then
    gcloud container clusters get-credentials \
      --region $REGION_NAME $CLUSTER_NAME > /dev/null 2>&1
  fi
}

function gcfg {
  echo -e "project: $(gcloud config get-value project)"
  if [ ! -z $CLUSTER_NAME ]; then
    echo -e "context: $(kubectl config current-context)"
  else
    echo -e "context: "
  fi
}

function gauth {
  export GOOGLE_APPLICATION_CREDENTIALS=$(find ~/.config/gcloud/**/*.json -type f | fzf)
  export GOOGLE_PROJECT_ID=$(cat $GOOGLE_APPLICATION_CREDENTIALS | jq -r '.project_id')
  gcloud auth activate-service-account \
      --key-file=$GOOGLE_APPLICATION_CREDENTIALS \
      --project=$GOOGLE_PROJECT_ID > /dev/null 2>&1
  kctx
  gcfg
}

function notify {
  # local account=$(gcloud config get core/account)
  # local ip=$(gip)
  # curl -X POST -H 'Content-type: application/json' --data "{
  #   \"text\": \"${account}\n_${ip}_\"
  # }" $SLACK_URL > /dev/null 2>&1
}

function proxy {
  INSTANCE_CONNECTION_NAME=`
    gcloud sql instances list --format 'value(name)' \
      | fzf \
      | xargs gcloud sql instances describe --format 'value(connectionName)'
  `
  notify
  cloud-sql-proxy $INSTANCE_CONNECTION_NAME
}
